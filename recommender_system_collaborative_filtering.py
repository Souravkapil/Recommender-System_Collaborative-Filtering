# -*- coding: utf-8 -*-
"""Recommender_System-Collaborative_Filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oc0bDIdPb3rmhFOPQ8YsAytmXbADw3PQ

# Movie Recommender System using Collaborative Filtering
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

movies = pd.read_csv('movies.csv')
ratings = pd.read_csv('ratings.csv')

movies.head()

ratings.head()

"""# Data Manipulation"""

ratings = pd.merge(movies,ratings)

ratings.head()

ratings = ratings.drop(['movieId','timestamp','genres'],axis=1)
ratings.head()

"""# Reshaped the DataFrame using pivot_table(index, columns, values) function"""

user_ratings = ratings.pivot_table(index=['userId'],columns= ['title'],values = 'rating')

user_ratings.head()

user_ratings = user_ratings.dropna(thresh=10,axis=1).fillna(0)

user_ratings.head()

user_ratings.shape

"""# Find Correlation between movies using pearson method"""

item_similarity = user_ratings.corr(method='pearson')
item_similarity

"""# Getting Similar movies accorting to users ratings"""

def get_similar_movie(movie_name,user_rating):
    similar_score = item_similarity[movie_name]*user_rating
    return similar_score

print(get_similar_movie('2 Fast 2 Furious (Fast and the Furious 2, The) (2003)',5))

def get_similar_movie(movie_name,user_rating):
    similar_score = item_similarity[movie_name]*(user_rating-2.5)
    similar_score = similar_score.sort_values(ascending=False)
    return similar_score

print(get_similar_movie('2 Fast 2 Furious (Fast and the Furious 2, The) (2003)',5))

def get_similar_movie(movie_name,user_rating):
    similar_score = item_similarity[movie_name]*(user_rating-2.5)
    similar_score = similar_score.sort_values(ascending=False)
    return similar_score

print(get_similar_movie('X-Men (2000)',1))

"""# Final Output"""

action_lover = [("2 Fast 2 Furious (Fast and the Furious 2, The) (2003)",5),
                ("12 Years a Slave (2013)",4),("2012 (2009)",3),
                ("(500) Days of Summer (2009)",2)]

similar_movies = pd.DataFrame()

for movie,rating in action_lover:
    similar_movies =  similar_movies.append(get_similar_movie(movie,rating))
    
similar_movies.head()

action_lover = [("2 Fast 2 Furious (Fast and the Furious 2, The) (2003)",5),
                ("12 Years a Slave (2013)",4),("2012 (2009)",3),
                ("(500) Days of Summer (2009)",2)]

similar_movies = pd.DataFrame()

for movie,rating in action_lover:
    similar_movies =  similar_movies.append(get_similar_movie(movie,rating),ignore_index=True)
    
similar_movies.head()
similar_movies.sum().sort_values(ascending=False)

action_lover = [("X-Men: First Class (2011)",5)]

similar_movies = pd.DataFrame()

for movie,rating in action_lover:
    similar_movies =  similar_movies.append(get_similar_movie(movie,rating),ignore_index=True)
    
similar_movies.head()
similar_movies.sum().sort_values(ascending=False)

action_lover = [("Iron Man 3 (2013)",1)]

similar_movies = pd.DataFrame()

for movie,rating in action_lover:
    similar_movies =  similar_movies.append(get_similar_movie(movie,rating),ignore_index=True)
    
similar_movies.head()
similar_movies.sum().sort_values(ascending=False)

action_lover = [("Iron Man 3 (2013)",1)]

similar_movies = pd.DataFrame()

for movie,rating in action_lover:
    similar_movies =  similar_movies.append(get_similar_movie(movie,rating),ignore_index=True)
    
similar_movies.head()
similar_movies.sum().sort_values(ascending=False)[0:20]

